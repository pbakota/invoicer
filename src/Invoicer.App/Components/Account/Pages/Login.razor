@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Invoicer.Models

@inject IStringLocalizer<I18N> Loc
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>@Loc["Login.Text.SignIn"]</PageTitle>

<h3 class="login-heading mb-4">@Loc["NavMenu.Invoicer.App"]</h3>
<section>
    <StatusMessage Message="@errorMessage"/>
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        <div class="form-floating mb-3 login-form">
            <InputText type="email" @bind-Value="Input.Email" class="form-control"
                       id="floatingInput" placeholder="name@example.com"/>
            <label for="floatingInput">@Loc["Login.Text.Email"]</label>
            <ValidationMessage For="() => Input.Email" class="text-danger"/>
        </div>
        <div class="form-floating mb-3 login-form">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" id="floatingPassword"
                       autocomplete="current-password"
                       placeholder="@Loc["Login.Text.Password"]"/>
            <label for="floatingPassword">@Loc["Login.Text.Password"]</label>
            <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </div>

        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" id="rememberPasswordCheck"/>
            <label class="form-check-label" for="rememberPasswordCheck">
                @Loc["Login.Text.RememberMe"]
            </label>
        </div>

        <div class="d-grid">
            <button class="btn btn-lg btn-login text-uppercase fw-bold mb-2"
                    type="submit">
                @Loc["Login.Text.SignIn"]
            </button>
            @if (!AppConstants.IsElectronApp)
            {
                #pragma warning disable CS0162
                <div class="text-center">
                    <a class="small" href="/Account/ForgotPassword">@Loc["Login.Text.ForgotPassword"]</a>
                </div>
            }
        </div>

    </EditForm>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}